import React, { useEffect, useMemo, useState } from "react";

// --- types & API helpers (adapt import paths to your project) ---
type Taxonomy = { categories: string[]; map: Record<string, string[]> };
async function fetchTaxonomy(): Promise<Taxonomy> {
  const r = await fetch("/api/taxonomy"); const j = await r.json();
  if (!j.ok) throw new Error("tax");
  return j.taxonomy as Taxonomy;
}

type ListingDraft = {
  id?: string;
  category?: string | null;
  subcategory?: string | null;

  trade_anonymously?: boolean;
  trading_name?: string | null;
  title?: string | null;
  description?: string | null;

  quantity?: number | null;
  unit?: string | null;
  moq?: number | null;
  region?: string | null;
  frequency?: string | null;

  price_per_unit?: number | null;
  currency?: string | null;
  payment_method?: string | null;

  photo_count?: number;    // server-calculated for checklist
  coa_count?: number;      // server-calculated
  lic_cred_count?: number; // server-calculated
};

async function saveDraft(payload: Partial<ListingDraft>): Promise<{ok:boolean; id:string}> {
  const r = await fetch("/api/listings", { method:"POST", headers:{ "Content-Type":"application/json" }, body: JSON.stringify(payload) });
  const j = await r.json(); if (!r.ok || !j.ok) throw new Error(j.error || "Save failed");
  return { ok:true, id: j.id };
}
async function updateDraft(id:string, payload: Partial<ListingDraft>) {
  const r = await fetch(`/api/listings/${id}`, { method:"PATCH", headers:{ "Content-Type":"application/json" }, body: JSON.stringify(payload) });
  const j = await r.json(); if (!r.ok || !j.ok) throw new Error(j.error || "Update failed");
}
async function fetchDraft(id:string): Promise<ListingDraft> {
  const r = await fetch(`/api/listings/${id}`); const j = await r.json();
  if (!r.ok || !j.ok) throw new Error(j.error || "Load failed");
  return j.listing as ListingDraft;
}
async function publishListing(id:string): Promise<{ok:boolean; checklist?:string[]}> {
  const r = await fetch(`/api/listings/${id}/publish`, { method:"POST" });
  const j = await r.json();
  if (!r.ok) return { ok:false, checklist: j.checklist || [j.error || "Publish failed"] };
  return { ok:true };
}

// --- UI component ---
export default function ListingForm() {
  const [tax, setTax] = useState<Taxonomy>({ categories:[], map:{} });
  const [draft, setDraft] = useState<ListingDraft>({});
  const [step, setStep] = useState<number>(1);
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState<string[]>([]);
  const [draftId, setDraftId] = useState<string | undefined>(undefined);

  useEffect(() => {
    let m = true;
    fetchTaxonomy().then(t => m && setTax(t)).catch(() => setTax({ categories:[], map:{} }));
    return () => { m = false; };
  }, []);

  // --- Derived: subcategory list & auto-title ---
  const subcatOptions = useMemo(() => draft.category ? (tax.map[draft.category!] || []) : [], [draft.category, tax]);
  useEffect(() => {
    // reset subcategory when category changes
    setDraft(prev => ({ ...prev, subcategory: undefined }));
  }, [draft.category]);

  useEffect(() => {
    // simple auto-title suggestion after enough info is present
    const parts = [];
    if (draft.category) parts.push(draft.category);
    if (draft.subcategory) parts.push(draft.subcategory);
    if (draft.region) parts.push(String(draft.region));
    if (draft.quantity && draft.unit) parts.push(`${draft.quantity} ${draft.unit}`);
    const suggestion = parts.join(" — ");
    setDraft(prev => ({ ...prev, title: prev.title || (suggestion || null) }));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [draft.category, draft.subcategory, draft.region, draft.quantity, draft.unit]);

  async function handleSave() {
    setLoading(true); setErrors([]);
    try {
      if (!draftId) {
        const res = await saveDraft(draft);
        setDraftId(res.id);
      } else {
        await updateDraft(draftId, draft);
      }
      alert("Saved as Draft");
    } catch (e:any) {
      alert(e.message || "Save failed");
    } finally { setLoading(false); }
  }

  async function handlePublish() {
    if (!draftId) { alert("Save as Draft first."); return; }
    setLoading(true); setErrors([]);
    try {
      const res = await publishListing(draftId);
      if (!res.ok) {
        setErrors(res.checklist || ["Unable to publish"]);
        return;
      }
      alert("Listing published");
      // optionally navigate to detail page
    } catch (e:any) {
      setErrors([e.message || "Publish failed"]);
    } finally { setLoading(false); }
  }

  // --- Simple step container ---
  const Nav = () => (
    <div className="flex items-center gap-2 my-4">
      <button type="button" onClick={() => setStep(s => Math.max(1, s-1))} className="px-3 py-2 border rounded">Back</button>
      <button type="button" onClick={handleSave} className="px-3 py-2 border rounded">Save as Draft</button>
      <button type="button" onClick={() => setStep(s => s+1)} className="px-3 py-2 border rounded">Next</button>
    </div>
  );

  return (
    <div className="max-w-3xl mx-auto">
      <h1 className="text-2xl font-semibold mb-4">Create Listing</h1>

      {/* Errors (e.g., from publish) */}
      {errors.length > 0 && (
        <div className="mb-4 rounded border border-red-300 bg-red-50 p-3">
          <p className="font-medium mb-1">Needs attention before publish:</p>
          <ul className="list-disc pl-5">{errors.map((e,i) => <li key={i}>{e}</li>)}</ul>
        </div>
      )}

      {/* STEP 1: Category */}
      {step === 1 && (
        <section className="space-y-4">
          <div>
            <label className="block mb-1 font-medium">Category</label>
            <select
              value={draft.category || ""}
              onChange={(e) => setDraft(d => ({ ...d, category: e.target.value || null }))}
              className="w-full border rounded px-3 py-2"
            >
              <option value="">Select a category…</option>
              {tax.categories.map(cat => <option key={cat} value={cat}>{cat}</option>)}
            </select>
            <p className="text-sm text-gray-500 mt-1">Choose a category to unlock the next step.</p>
          </div>
          <Nav />
        </section>
      )}

      {/* STEP 2: Sub-category */}
      {step === 2 && (
        <section className="space-y-4">
          <div>
            <label className="block mb-1 font-medium">Sub-category</label>
            <select
              value={draft.subcategory || ""}
              onChange={(e) => setDraft(d => ({ ...d, subcategory: e.target.value || null }))}
              disabled={!draft.category}
              className="w-full border rounded px-3 py-2 disabled:bg-gray-100"
            >
              <option value="">{draft.category ? "Select a sub-category…" : "Select a category first"}</option>
              {subcatOptions.map(s => <option key={s} value={s}>{s}</option>)}
            </select>
          </div>
          <Nav />
        </section>
      )}

      {/* STEP 3: Identity & Presentation */}
      {step === 3 && (
        <section className="space-y-4">
          <div className="flex items-center gap-2">
            <input
              id="anon"
              type="checkbox"
              checked={!!draft.trade_anonymously}
              onChange={(e) => setDraft(d => ({ ...d, trade_anonymously: e.target.checked }))}
            />
            <label htmlFor="anon">Trade anonymously (show trading name publicly)</label>
          </div>
          {draft.trade_anonymously && (
            <div>
              <label className="block mb-1 font-medium">Trading name</label>
              <input
                value={draft.trading_name || ""}
                onChange={(e) => setDraft(d => ({ ...d, trading_name: e.target.value || null }))}
                className="w-full border rounded px-3 py-2"
                placeholder="e.g., EC Green Trader"
              />
            </div>
          )}
          <div>
            <label className="block mb-1 font-medium">Title</label>
            <input
              value={draft.title || ""}
              onChange={(e) => setDraft(d => ({ ...d, title: e.target.value || null }))}
              className="w-full border rounded px-3 py-2"
              placeholder="Auto-suggested title (editable)"
            />
          </div>
          <div>
            <label className="block mb-1 font-medium">Short description</label>
            <textarea
              value={draft.description || ""}
              onChange={(e) => setDraft(d => ({ ...d, description: e.target.value || null }))}
              className="w-full border rounded px-3 py-2"
              rows={4}
            />
          </div>
          <Nav />
        </section>
      )}

      {/* STEP 4: Quantity & Logistics */}
      {step === 4 && (
        <section className="space-y-4">
          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="block mb-1 font-medium">Quantity</label>
              <input
                type="number"
                value={draft.quantity ?? ""}
                onChange={(e) => setDraft(d => ({ ...d, quantity: e.target.value === "" ? null : Number(e.target.value) }))}
                className="w-full border rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block mb-1 font-medium">Unit</label>
              <select
                value={draft.unit || ""}
                onChange={(e) => setDraft(d => ({ ...d, unit: e.target.value || null }))}
                className="w-full border rounded px-3 py-2"
              >
                <option value="">Select unit…</option>
                {["kg","g","oz","lb","ton","unit","credit"].map(u => <option key={u} value={u}>{u}</option>)}
              </select>
            </div>
          </div>
          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="block mb-1 font-medium">Minimum order quantity</label>
              <input
                type="number"
                value={draft.moq ?? ""}
                onChange={(e) => setDraft(d => ({ ...d, moq: e.target.value === "" ? null : Number(e.target.value) }))}
                className="w-full border rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block mb-1 font-medium">Region / Location</label>
              <input
                value={draft.region || ""}
                onChange={(e) => setDraft(d => ({ ...d, region: e.target.value || null }))}
                className="w-full border rounded px-3 py-2"
                placeholder="e.g., Eastern Cape, South Africa"
              />
            </div>
          </div>
          <div>
            <label className="block mb-1 font-medium">Supply frequency</label>
            <select
              value={draft.frequency || ""}
              onChange={(e) => setDraft(d => ({ ...d, frequency: e.target.value || null }))}
              className="w-full border rounded px-3 py-2"
            >
              <option value="">Select…</option>
              {["one_off","weekly","monthly","quarterly","seasonal","continuous"].map(f => (
                <option key={f} value={f}>{f.replace("_"," ")}</option>
              ))}
            </select>
          </div>
          <Nav />
        </section>
      )}

      {/* STEP 5: Commercials */}
      {step === 5 && (
        <section className="space-y-4">
          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="block mb-1 font-medium">Price per unit</label>
              <input
                type="number"
                value={draft.price_per_unit ?? ""}
                onChange={(e) => setDraft(d => ({ ...d, price_per_unit: e.target.value === "" ? null : Number(e.target.value) }))}
                className="w-full border rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block mb-1 font-medium">Currency</label>
              <select
                value={draft.currency || ""}
                onChange={(e) => setDraft(d => ({ ...d, currency: e.target.value || null }))}
                className="w-full border rounded px-3 py-2"
              >
                <option value="">Select currency…</option>
                {["ZAR","USD","EUR","GBP"].map(c => <option key={c} value={c}>{c}</option>)}
              </select>
            </div>
          </div>
          <div>
            <label className="block mb-1 font-medium">Payment method</label>
            <select
              value={draft.payment_method || ""}
              onChange={(e) => setDraft(d => ({ ...d, payment_method: e.target.value || null }))}
              className="w-full border rounded px-3 py-2"
            >
              <option value="">Select…</option>
              {["wire_transfer","escrow","letter_of_credit","eft/ach","card","other"].map(p => <option key={p} value={p}>{p.replace("_"," ").toUpperCase()}</option>)}
            </select>
          </div>
          <Nav />
        </section>
      )}

      {/* STEP 6 & 7: Compliance (docs) & Media (photos)
          Reuse your existing upload components; just render them here.
          Ensure uploads write documents with doc_type='coa' | 'licence' | 'certificate' | 'product_image'.
      */}
      {step === 6 && (
        <section className="space-y-4">
          <h2 className="font-medium">Compliance & Trust</h2>
          <p>Upload COA and licences/certificates. (Save as Draft is allowed; these are required to Publish.)</p>
          {/* Your existing DocumentUpload components go here */}
          <Nav />
        </section>
      )}
      {step === 7 && (
        <section className="space-y-4">
          <h2 className="font-medium">Media</h2>
          <p>Add at least one clear product photo.</p>
          {/* Your existing ImageUpload component goes here */}
          <Nav />
        </section>
      )}

      {/* STEP 8: Review & Publish */}
      {step === 8 && (
        <section className="space-y-4">
          <h2 className="font-medium">Review & Publish</h2>
          <p className="text-sm text-gray-600">We’ll check the basics before this goes live.</p>
          <div className="flex gap-2">
            <button type="button" onClick={handleSave} disabled={loading} className="px-4 py-2 border rounded">Save as Draft</button>
            <button type="button" onClick={handlePublish} disabled={loading} className="px-4 py-2 rounded bg-black text-white">Publish</button>
          </div>
        </section>
      )}
    </div>