GOAL: Keep the current working MVP (Search + Listings) exactly as is. Re-introduce “Signals” and add seams for the four extensions (Uncertainty, QMatch, Intuition, Bandits) — ALL behind feature flags and OFF by default. No heavy work on startup. Root (/) must serve the React app. Health check at /healthz. HashRouter on client so "/#/search" works. Print what you changed and how to test.

SAFE BACKUP
• Create backup/safe-flags-<timestamp>/ and copy:
  - index.js/app.js/server.js
  - routes/search.js, services/crawlerService.js
  - connectors/*, routes/signals.js (if any)
  - services/rankingService.js (if present)
  - package.json (root), client/package.json
  - client/src/App.* and client/src/main.*
• Print the list of files backed up.

STEP 1 — CONFIG & FEATURE FLAGS (all default OFF)
Create config/flags.js exporting:
  module.exports = {
    ENABLE_SIGNALS: process.env.ENABLE_SIGNALS === 'true',
    ENABLE_UNCERTAINTY: process.env.ENABLE_UNCERTAINTY === 'true',
    ENABLE_QMATCH: process.env.ENABLE_QMATCH === 'true',
    ENABLE_INTUITION: process.env.ENABLE_INTUITION === 'true',
    ENABLE_BANDITS: process.env.ENABLE_BANDITS === 'true',
  };

STEP 2 — SERVER GUARANTEES (do NOT break current working state)
In the main Express entry (index.js preferred):
  • app.use(express.json());
  • Mount ALL /api routes FIRST (keep existing working search route exactly as is).
  • Health check: app.get('/healthz', (req,res)=>res.status(200).send('OK'));
  • Remove ANY app.get('/') that returns text; we serve the SPA at '/'.
  • After /api routes and /healthz, serve SPA from client/dist (Vite) or client/build (CRA):
      const path = require('path'); const fs = require('fs');
      const candidates = [
        path.join(__dirname, 'client', 'dist'),
        path.join(__dirname, 'client', 'build'),
        path.join(process.cwd(), 'client', 'dist'),
        path.join(process.cwd(), 'client', 'build'),
      ];
      const clientDir = candidates.find(p => fs.existsSync(path.join(p, 'index.html')));
      console.log('clientDir:', clientDir || '(none)');
      if (clientDir) {
        app.use(express.static(clientDir));
        app.get('*', (req, res) => {
          if (req.path.startsWith('/api') || req.path === '/healthz') return res.status(404).send('Not found');
          res.sendFile(path.join(clientDir, 'index.html'));
        });
      }

STEP 3 — SIGNALS (re-introduce behind flag; NO startup work)
• Create data/signals.json if missing with [].
• lib/safeJsonStore.js with readJson(file), writeJson(file, data) (atomic write).
• routes/signals.js (Express Router):
   - POST /api/signals/ingest  → validate {source, kind, companyName, commodity, region, text, priceMin?, priceMax?, url?}
     * commodity must be one of ['cannabis','hemp','cbd']; text <= 500 chars
     * derive companyKey (slug of companyName)
     * save { id: uuid, createdAt: now, views:0, clicks:0, ...payload }
     * return { ok:true, id }
   - GET /api/signals/search?query=&commodity=&region=&page=1&limit=20
     * filter by commodity/region (allow-list); simple keyword match in companyName/text
     * sort by createdAt desc; return { ok:true, count, page, pages, results }
   - POST /api/events/log { type:'view'|'click', itemType:'signal', itemId }
     * increment views/clicks on that signal; return { ok:true }
• In index.js, mount Signals ONLY if flags.ENABLE_SIGNALS is true:
   const flags = require('./config/flags');
   if (flags.ENABLE_SIGNALS) app.use('/api/signals', require('./routes/signals'));

• connectors/internalSignals.js:
   module.exports = {
     name: 'internalSignals',
     fetchAndNormalize: async (token, criteria) => {
       // read data/signals.json (fast), filter by commodity/region/query,
       // map to unified shape:
       // { _type:'signal', counterpartyId:id, counterpartyName:companyName,
       //   commodityType:commodity, region, pricePerUnit:null, quantityAvailable:null,
       //   qualitySpecs:null, licenseStatus:null, createdAt }
       // return [] on any error (do NOT throw).
     }
   };

STEP 4 — CRAWLER SAFETY (no implicit fallbacks, short timeouts)
In services/crawlerService.js:
  • Do NOT “query all connectors if none provided”. If none, return error or [].
  • Wrap each connector call in try/catch so one failure doesn’t fail the whole search.
  • Respect options.noCache (when true, bypass cache).
  • Ensure a per-connector timeout (e.g., 2–3s). Late results are dropped for this request.

STEP 5 — SEARCH ROUTE (keep Listings working; Signals opt-in)
In routes/search.js (existing file):
  • Keep current behaviour for Listings as TODAY (working).
  • Accept body fields: { query, commodityType, region, priceMin, priceMax, useListings=true, useSignals=false, connectors?, options? }.
  • Build the actual connectors object explicitly:
      const flags = require('../config/flags');
      const connectors = {};
      if (useListings !== false) connectors.internalDB = '';
      if (flags.ENABLE_SIGNALS && useSignals === true) connectors.internalSignals = '';
  • Enforce commodity allow-list {'cannabis','hemp','cbd'}; if blank, default to those.
  • Apply server-side filters (region/price) after the crawler returns.
  • Return { ok:true, meta, count, results }.

STEP 6 — RANKING + NEW “SEAMS” (flags OFF, non-disruptive)
Create services/rankingService.js if missing and have /api/search call it. Implement deterministic scoring (keyword + commodity/region + freshness). Then add NON-BREAKING, FLAG-GATED fields:

  const flags = require('../config/flags');
  // base score calculation stays identical to current working version.
  // When flags.ENABLE_UNCERTAINTY: append scoreUncertainty (e.g., based on freshness/sparsity) — small numeric.
  // When flags.ENABLE_QMATCH: call services/qmatchClient.getInterference(criteria, items, { timeoutMs: 150 }) NON-BLOCKING:
  //   try → blend tiny +γ*interference - δ*conflict into score; catch → ignore.
  // When flags.ENABLE_INTUITION: if items have a beliefScore (from intuition ingest), add tiny +ε*beliefScore.
  // When flags.ENABLE_BANDITS: (no change to score); a separate endpoint will recommend outreach variants.

Create service stubs (NO startup work, NO external calls):
• services/qmatchClient.js → exports async getInterference(...) { return { byId: {} } } // fast stub
• routes/intuition.js (only mount if flags.ENABLE_INTUITION): POST /api/intuition/ingest to store soft notes with confidence/decay into data/intuition.json. (No ranking use unless flag on.)
• routes/recommend.js (only mount if flags.ENABLE_BANDITS): GET /api/recommend/outreach?itemId=… returns { variant: "control" }.

Mount those routers ONLY when their flags are true.

STEP 7 — CLIENT (HashRouter + optional Signals toggle)
• Ensure client uses HashRouter:
   import { HashRouter as BrowserRouter, Routes, Route } from 'react-router-dom';
• In Search page, keep your current fields. Add two checkboxes above Search:
   [x] Listings (internalDB)
   [ ] Signals  (internalSignals)
  Build the body:
   const connectors:any = {};
   if (useListings) connectors.internalDB = '';
   if (useSignals)  connectors.internalSignals = '';
   fetch('/api/search', { body: JSON.stringify({ query, commodityType, region, priceMin, priceMax, useListings, useSignals, connectors, options:{ noCache:true, timeoutMs:3000 } }) })
• OPTIONAL: if you can fetch /api/signals/search and it 404s, disable the Signals checkbox in the UI.

STEP 8 — BUILD & RUN
• In /client: npm install (or npm ci); npm run build
• Root package.json must start Node (not vite):
   "start": "node index.js"
• Start server. Confirm console shows:
   - “clientDir: …/client/dist” (or build)
   - “Server listening on …”

STEP 9 — QUICK TESTS (NO SIGNALS — should behave exactly as today)
• Listings-only search:
  curl -s -X POST http://localhost:3000/api/search \
    -H "Content-Type: application/json" \
    -d '{ "commodityType":"cannabis", "useListings": true, "useSignals": false, "options":{"noCache":true} }' | jq ".ok,.count"

STEP 10 — OPTIONAL SIGNALS TEST (ONLY IN PREVIEW; DO NOT CHANGE PROD ENV)
• Set ENABLE_SIGNALS=true in the environment and restart (preview only).
• Ingest a quick signal:
  curl -s -X POST http://localhost:3000/api/signals/ingest \
    -H "Content-Type: application/json" \
    -d '{"source":"manual","kind":"buyer_intent","companyName":"EC Wellness Coop","commodity":"cannabis","region":"EC","text":"Indoor trial 50kg then 300kg/m."}' | jq
• Search signals via unified search:
  curl -s -X POST http://localhost:3000/api/search \
    -H "Content-Type: application/json" \
    -d '{ "query":"indoor","commodityType":"cannabis","region":"EC","useListings": false,"useSignals": true,"connectors":{"internalSignals":""},"options":{"noCache":true}}' | jq ".count,.results[0]"

PRINT SUMMARY
• List files added/changed.
• Print which flags are currently ON/OFF (should all be OFF unless you set them).
• Print final URLs to use:
  - "/" (SPA)
  - "/healthz" (OK)
  - "/#/search" (Search page, stable on any host)