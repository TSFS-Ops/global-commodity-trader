import React, { useEffect, useMemo, useState } from "react";
import { fetchTaxonomy, Taxonomy } from "@/api/taxonomy";

type ListingFormState = {
  category?: string;
  subcategory?: string;
  // ... your other fields
};

export default function ListingForm() {
  const [tax, setTax] = useState<Taxonomy>({ categories: [], map: {} });
  const [form, setForm] = useState<ListingFormState>({});

  useEffect(() => {
    let mounted = true;
    fetchTaxonomy().then(t => mounted && setTax(t)).catch(() => setTax({ categories: [], map: {} }));
    return () => { mounted = false; };
  }, []);

  // Whenever category changes, reset subcategory
  const setCategory = (cat: string) => {
    setForm(prev => ({
      ...prev,
      category: cat || undefined,
      subcategory: undefined
    }));
  };
  const setSubcategory = (sub: string) => {
    setForm(prev => ({ ...prev, subcategory: sub || undefined }));
  };

  const subcatOptions = useMemo(() => {
    return form.category ? (tax.map[form.category] || []) : [];
  }, [form.category, tax]);

  // Submit handler (save as draft)
  const onSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const payload = {
      category: form.category || null,
      subcategory: form.subcategory || null,
      // ...include your other fields here (can be null/undefined for drafts)
    };
    const res = await fetch("/api/listings", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    });
    const json = await res.json();
    if (!res.ok || !json.ok) {
      alert(json.error || "Failed to save listing");
      return;
    }
    // handle success (toast, redirect, etc.)
  };

  return (
    <form onSubmit={onSubmit} className="space-y-4">
      {/* Category (first question) */}
      <div>
        <label className="block mb-1 font-medium">Category</label>
        <select
          value={form.category || ""}
          onChange={(e) => setCategory(e.target.value)}
          className="w-full border rounded px-3 py-2"
        >
          <option value="">Select a category…</option>
          {tax.categories.map(cat => (
            <option key={cat} value={cat}>{cat}</option>
          ))}
        </select>
        <p className="text-sm text-gray-500 mt-1">Choose a category to see relevant sub-categories.</p>
      </div>

      {/* Sub-category (depends on Category) */}
      <div>
        <label className="block mb-1 font-medium">Sub-category</label>
        <select
          value={form.subcategory || ""}
          onChange={(e) => setSubcategory(e.target.value)}
          disabled={!form.category}
          className="w-full border rounded px-3 py-2 disabled:bg-gray-100"
        >
          <option value="">{form.category ? "Select a sub-category…" : "Select a category first"}</option>
          {subcatOptions.map(sub => (
            <option key={sub} value={sub}>{sub}</option>
          ))}
        </select>
      </div>

      {/* …your other fields remain as they are (quantity, price, etc.). Keep them controlled with value={x || ""} */}

      <div className="flex gap-2">
        <button type="submit" className="px-4 py-2 rounded bg-black text-white">Save as Draft</button>
        {/* Your Publish button can remain, with server-side checks */}
      </div>
    </form>
  );
}